Origin: https://gitlab.com/gnutls/gnutls/-/commit/fe3453be9032e94940e1b9cfb1ece35d0d822d06
Reviewed-by: Sylvain Beucler <beuc@debian.org>
Last-Update: 2021-09-11

From fe3453be9032e94940e1b9cfb1ece35d0d822d06 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos <nmav@gnutls.org>
Date: Mon, 8 May 2017 06:43:28 +0200
Subject: [PATCH] gnutls_x509_trust_list_verify_crt2: treat signers with
 insecure algorithms as unknown

The reason is that many servers utilize a legacy chain to improve compatibility
with old clients and that chain often contains insecure algorithm. In that case
try to construct alternative paths. To maintain compatibility with previous
versions, we ensure that the same error code (verification status) is returned
in these cases as before by sending the cached error if the alternative path fails
too.

Signed-off-by: Nikos Mavrogiannopoulos <nmav@gnutls.org>
---
 lib/x509/verify-high.c | 30 ++++++++++++++++++++++++------
 1 file changed, 24 insertions(+), 6 deletions(-)

Index: gnutls28-3.3.30/lib/x509/verify-high.c
===================================================================
--- gnutls28-3.3.30.orig/lib/x509/verify-high.c
+++ gnutls28-3.3.30/lib/x509/verify-high.c
@@ -51,7 +51,6 @@ struct node_st {
 	/* The trusted CRLs */
 	gnutls_x509_crl_t *crls;
 	unsigned int crl_size;
-
 };
 
 #define DEFAULT_SIZE 127
@@ -858,6 +857,15 @@ gnutls_x509_trust_list_verify_crt(gnutls
 						  NULL, 0, flags, voutput, func);
 }
 
+#define LAST_DN cert_list[cert_list_size-1]->raw_dn
+#define LAST_IDN cert_list[cert_list_size-1]->raw_issuer_dn
+/* This macro is introduced to detect a verification output
+ * which indicates an unknown signer, or a signer which uses
+ * an insecure algorithm (e.g., sha1), something that indicates
+ * a superceded signer */
+#define SIGNER_OLD_OR_UNKNOWN(output) ((output & GNUTLS_CERT_SIGNER_NOT_FOUND) || (output & GNUTLS_CERT_INSECURE_ALGORITHM))
+#define SIGNER_WAS_KNOWN(output) (!(output & GNUTLS_CERT_SIGNER_NOT_FOUND))
+
 /**
  * gnutls_x509_trust_list_verify_crt2:
  * @list: The structure of the list
@@ -909,6 +917,7 @@ gnutls_x509_trust_list_verify_crt2(gnutl
 	uint32_t hash;
 	gnutls_x509_crt_t sorted[DEFAULT_MAX_VERIFY_DEPTH];
 	const char *hostname = NULL, *purpose = NULL;
+	unsigned saved_output;
 
 	if (cert_list == NULL || cert_list_size < 1)
 		return gnutls_assert_val(GNUTLS_E_INVALID_REQUEST);
@@ -950,11 +959,9 @@ gnutls_x509_trust_list_verify_crt2(gnutl
 					    list->
 					    node[hash].trusted_ca_size,
 					    flags, func);
+	saved_output = *voutput;
 
-#define LAST_DN cert_list[cert_list_size-1]->raw_dn
-#define LAST_IDN cert_list[cert_list_size-1]->raw_issuer_dn
-
-	if ((*voutput) & GNUTLS_CERT_SIGNER_NOT_FOUND &&
+	if (SIGNER_OLD_OR_UNKNOWN(*voutput) &&
 		(LAST_DN.size != LAST_IDN.size ||
 		 memcmp(LAST_DN.data, LAST_IDN.data, LAST_IDN.size) != 0)) {
 
@@ -966,16 +973,25 @@ gnutls_x509_trust_list_verify_crt2(gnutl
 			  data, cert_list[cert_list_size - 1]->raw_dn.size);
 		hash %= list->size;
 
+		 _gnutls_debug_log("issuer in verification was not found or insecure; trying against trust list\n");
+
 		*voutput =
 		    _gnutls_verify_crt_status(cert_list, cert_list_size,
 					    list->node[hash].trusted_cas,
 					    list->
 					    node[hash].trusted_ca_size,
 					    flags, func);
+		if (*voutput != 0) {
+			if (SIGNER_WAS_KNOWN(saved_output))
+				*voutput = saved_output;
+			gnutls_assert();
+		}
 	}
 
+	saved_output = *voutput;
+
 #ifdef ENABLE_PKCS11
-	if ((*voutput & GNUTLS_CERT_SIGNER_NOT_FOUND) && list->pkcs11_token) {
+	if (SIGNER_OLD_OR_UNKNOWN(*voutput) && list->pkcs11_token) {
 		/* use the token for verification */
 
 		*voutput = _gnutls_pkcs11_verify_crt_status(list->pkcs11_token,
@@ -983,6 +999,8 @@ gnutls_x509_trust_list_verify_crt2(gnutl
 								purpose!=NULL?purpose:GNUTLS_KP_TLS_WWW_SERVER,
 								flags, func);
 		if (*voutput != 0) {
+			if (SIGNER_WAS_KNOWN(saved_output))
+				*voutput = saved_output;
 			gnutls_assert();
 		}
 	}
