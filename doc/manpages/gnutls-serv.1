.TH gnutls-serv 1 "18 Sep 2014" "3.3.8" "User Commands"
.\"
.\"  DO NOT EDIT THIS FILE   (serv-args.man)
.\"
.\"  It has been AutoGen-ed  September 18, 2014 at 01:53:16 PM by AutoGen 5.18.3
.\"  From the definitions    serv-args.def.tmp
.\"  and the template file   agman-cmd.tpl
.\"
.SH NAME
gnutls-serv \- GnuTLS server
.SH SYNOPSIS
.B gnutls-serv
.\" Mixture of short (flag) options and long options
.RB [ \-\fIflag\fP " [\fIvalue\fP]]... [" \-\-\fIopt\-name\fP "[[=| ]\fIvalue\fP]]..."
.PP
All arguments must be options.
.PP
.SH "DESCRIPTION"
Server program that listens to incoming TLS connections.
.SH "OPTIONS"
.TP
.BR  \-d " \fInumber\fP, " \-\-debug "=" \fInumber\fP
Enable debugging.
This option takes an integer number as its argument.
The value of \fInumber\fP is constrained to being:
.in +4
.nf
.na
in the range  0 through 9999
.fi
.in -4
.sp
Specifies the debug level.
.TP
.BR  \-\-noticket
Don't accept session tickets.
.sp
.TP
.BR  \-g ", " -\-generate
Generate Diffie-Hellman and RSA-export parameters.
.sp
.TP
.BR  \-q ", " -\-quiet
Suppress some messages.
.sp
.TP
.BR  \-\-nodb
Do not use a resumption database.
.sp
.TP
.BR  \-\-http
Act as an HTTP server.
.sp
.TP
.BR  \-\-echo
Act as an Echo server.
.sp
.TP
.BR  \-u ", " -\-udp
Use DTLS (datagram TLS) over UDP.
.sp
.TP
.BR  \-\-mtu "=\fInumber\fP"
Set MTU for datagram TLS.
This option takes an integer number as its argument.
The value of \fInumber\fP is constrained to being:
.in +4
.nf
.na
in the range  0 through 17000
.fi
.in -4
.sp
.TP
.BR  \-\-srtp\-profiles "=\fIstring\fP"
Offer SRTP profiles.
.sp
.TP
.BR  \-a ", " -\-disable\-client\-cert
Do not request a client certificate.
.sp
.TP
.BR  \-r ", " -\-require\-client\-cert
Require a client certificate.
.sp
.TP
.BR  \-\-verify\-client\-cert
If a client certificate is sent then verify it..
.sp
Do not require, but if a client certificate is sent then verify it and close the connection if invalid.
.TP
.BR  \-b ", " -\-heartbeat
Activate heartbeat support.
.sp
Regularly ping client via heartbeat extension messages
.TP
.BR  \-\-x509fmtder
Use DER format for certificates to read from.
.sp
.TP
.BR  \-\-priority "=\fIstring\fP"
Priorities string.
.sp
TLS algorithms and protocols to enable. You can
use predefined sets of ciphersuites such as PERFORMANCE,
NORMAL, SECURE128, SECURE256. The default is NORMAL.
.sp
Check  the  GnuTLS  manual  on  section  ``Priority strings'' for more
information on allowed keywords
.TP
.BR  \-\-dhparams "=\fIfile\fP"
DH params file to use.
.sp
.TP
.BR  \-\-x509cafile "=\fIstring\fP"
Certificate file or PKCS #11 URL to use.
.sp
.TP
.BR  \-\-x509crlfile "=\fIfile\fP"
CRL file to use.
.sp
.TP
.BR  \-\-pgpkeyfile "=\fIfile\fP"
PGP Key file to use.
.sp
.TP
.BR  \-\-pgpkeyring "=\fIfile\fP"
PGP Key ring file to use.
.sp
.TP
.BR  \-\-pgpcertfile "=\fIfile\fP"
PGP Public Key (certificate) file to use.
.sp
.TP
.BR  \-\-x509keyfile "=\fIstring\fP"
X.509 key file or PKCS #11 URL to use.
.sp
.TP
.BR  \-\-x509certfile "=\fIstring\fP"
X.509 Certificate file or PKCS #11 URL to use.
.sp
.TP
.BR  \-\-x509dsakeyfile "=\fIstring\fP"
Alternative X.509 key file or PKCS #11 URL to use.
.sp
.TP
.BR  \-\-x509dsacertfile "=\fIstring\fP"
Alternative X.509 Certificate file or PKCS #11 URL to use.
.sp
.TP
.BR  \-\-x509ecckeyfile "=\fIstring\fP"
Alternative X.509 key file or PKCS #11 URL to use.
.sp
.TP
.BR  \-\-x509ecccertfile "=\fIstring\fP"
Alternative X.509 Certificate file or PKCS #11 URL to use.
.sp
.TP
.BR  \-\-pgpsubkey "=\fIstring\fP"
PGP subkey to use (hex or auto).
.sp
.TP
.BR  \-\-srppasswd "=\fIfile\fP"
SRP password file to use.
.sp
.TP
.BR  \-\-srppasswdconf "=\fIfile\fP"
SRP password configuration file to use.
.sp
.TP
.BR  \-\-pskpasswd "=\fIfile\fP"
PSK password file to use.
.sp
.TP
.BR  \-\-pskhint "=\fIstring\fP"
PSK identity hint to use.
.sp
.TP
.BR  \-\-ocsp\-response "=\fIfile\fP"
The OCSP response to send to client.
.sp
If the client requested an OCSP response, return data from this file to the client.
.TP
.BR  \-p " \fInumber\fP, " \-\-port "=" \fInumber\fP
The port to connect to.
This option takes an integer number as its argument.
.sp
.TP
.BR  \-l ", " -\-list
Print a list of the supported algorithms and modes.
.sp
Print a list of the supported algorithms and modes. If a priority string is given then only the enabled ciphersuites are shown.
.TP
.BR \-h , " \-\-help"
Display usage information and exit.
.TP
.BR \-! , " \-\-more-help"
Pass the extended usage information through a pager.
.TP
.BR \-v " [{\fIv|c|n\fP}]," " \-\-version" "[={\fIv|c|n\fP}]"
Output version of program and exit.  The default mode is `v', a simple
version.  The `c' mode will print copyright information and `n' will
print the full copyright notice.
.SH EXAMPLES
Running your own TLS server based on GnuTLS can be useful when
debugging clients and/or GnuTLS itself.  This section describes how to
use \fBgnutls\-serv\fP as a simple HTTPS server.
.sp
The most basic server can be started as:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \-\-priority "NORMAL:+ANON\-ECDH:+ANON\-DH"
.in -4
.fi
.sp
It will only support anonymous ciphersuites, which many TLS clients
refuse to use.
.sp
The next step is to add support for X.509.  First we generate a CA:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-ca\-key.pem
$ echo 'cn = GnuTLS test CA' > ca.tmpl
$ echo 'ca' >> ca.tmpl
$ echo 'cert_signing_key' >> ca.tmpl
$ certtool \-\-generate\-self\-signed \-\-load\-privkey x509\-ca\-key.pem \
  \-\-template ca.tmpl \-\-outfile x509\-ca.pem
...
.in -4
.fi
.sp
Then generate a server certificate.  Remember to change the dns_name
value to the name of your server host, or skip that command to avoid
the field.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-server\-key.pem
$ echo 'organization = GnuTLS test server' > server.tmpl
$ echo 'cn = test.gnutls.org' >> server.tmpl
$ echo 'tls_www_server' >> server.tmpl
$ echo 'encryption_key' >> server.tmpl
$ echo 'signing_key' >> server.tmpl
$ echo 'dns_name = test.gnutls.org' >> server.tmpl
$ certtool \-\-generate\-certificate \-\-load\-privkey x509\-server\-key.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-template server.tmpl \-\-outfile x509\-server.pem
...
.in -4
.fi
.sp
For use in the client, you may want to generate a client certificate
as well.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-client\-key.pem
$ echo 'cn = GnuTLS test client' > client.tmpl
$ echo 'tls_www_client' >> client.tmpl
$ echo 'encryption_key' >> client.tmpl
$ echo 'signing_key' >> client.tmpl
$ certtool \-\-generate\-certificate \-\-load\-privkey x509\-client\-key.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-template client.tmpl \-\-outfile x509\-client.pem
...
.in -4
.fi
.sp
To be able to import the client key/certificate into some
applications, you will need to convert them into a PKCS#12 structure.
This also encrypts the security sensitive key with a password.
.sp
.br
.in +4
.nf
$ certtool \-\-to\-p12 \-\-load\-ca\-certificate x509\-ca.pem \
  \-\-load\-privkey x509\-client\-key.pem \-\-load\-certificate x509\-client.pem \
  \-\-outder \-\-outfile x509\-client.p12
.in -4
.fi
.sp
For icing, we'll create a proxy certificate for the client too.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > x509\-proxy\-key.pem
$ echo 'cn = GnuTLS test client proxy' > proxy.tmpl
$ certtool \-\-generate\-proxy \-\-load\-privkey x509\-proxy\-key.pem \
  \-\-load\-ca\-certificate x509\-client.pem \-\-load\-ca\-privkey x509\-client\-key.pem \
  \-\-load\-certificate x509\-client.pem \-\-template proxy.tmpl \
  \-\-outfile x509\-proxy.pem
...
.in -4
.fi
.sp
Then start the server again:
.sp
.br
.in +4
.nf
$ gnutls\-serv \-\-http \
            \-\-x509cafile x509\-ca.pem \
            \-\-x509keyfile x509\-server\-key.pem \
            \-\-x509certfile x509\-server.pem
.in -4
.fi
.sp
Try connecting to the server using your web browser.  Note that the
server listens to port 5556 by default.
.sp
While you are at it, to allow connections using DSA, you can also
create a DSA key and certificate for the server.  These credentials
will be used in the final example below.
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey \-\-dsa > x509\-server\-key\-dsa.pem
$ certtool \-\-generate\-certificate \-\-load\-privkey x509\-server\-key\-dsa.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-template server.tmpl \-\-outfile x509\-server\-dsa.pem
...
.in -4
.fi
.sp
The next step is to create OpenPGP credentials for the server.
.sp
.br
.in +4
.nf
gpg \-\-gen\-key
...enter whatever details you want, use 'test.gnutls.org' as name...
.in -4
.fi
.sp
Make a note of the OpenPGP key identifier of the newly generated key,
here it was \fB5D1D14D8\fP.  You will need to export the key for
GnuTLS to be able to use it.
.sp
.br
.in +4
.nf
gpg \-a \-\-export 5D1D14D8 > openpgp\-server.txt
gpg \-\-export 5D1D14D8 > openpgp\-server.bin
gpg \-\-export\-secret\-keys 5D1D14D8 > openpgp\-server\-key.bin
gpg \-a \-\-export\-secret\-keys 5D1D14D8 > openpgp\-server\-key.txt
.in -4
.fi
.sp
Let's start the server with support for OpenPGP credentials:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \-\-priority NORMAL:+CTYPE\-OPENPGP \
            \-\-pgpkeyfile openpgp\-server\-key.txt \
            \-\-pgpcertfile openpgp\-server.txt
.in -4
.fi
.sp
The next step is to add support for SRP authentication. This requires
an SRP password file created with \fBsrptool\fP.
To start the server with SRP support:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \-\-priority NORMAL:+SRP\-RSA:+SRP \
            \-\-srppasswdconf srp\-tpasswd.conf \
            \-\-srppasswd srp\-passwd.txt
.in -4
.fi
.sp
Let's also start a server with support for PSK. This would require
a password file created with \fBpsktool\fP.
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \-\-priority NORMAL:+ECDHE\-PSK:+PSK \
            \-\-pskpasswd psk\-passwd.txt
.in -4
.fi
.sp
Finally, we start the server with all the earlier parameters and you
get this command:
.sp
.br
.in +4
.nf
gnutls\-serv \-\-http \-\-priority NORMAL:+PSK:+SRP:+CTYPE\-OPENPGP \
            \-\-x509cafile x509\-ca.pem \
            \-\-x509keyfile x509\-server\-key.pem \
            \-\-x509certfile x509\-server.pem \
            \-\-x509dsakeyfile x509\-server\-key\-dsa.pem \
            \-\-x509dsacertfile x509\-server\-dsa.pem \
            \-\-pgpkeyfile openpgp\-server\-key.txt \
            \-\-pgpcertfile openpgp\-server.txt \
            \-\-srppasswdconf srp\-tpasswd.conf \
            \-\-srppasswd srp\-passwd.txt \
            \-\-pskpasswd psk\-passwd.txt
.in -4
.fi
.SH "EXIT STATUS"
One of the following exit values will be returned:
.TP
.BR 0 " (EXIT_SUCCESS)"
Successful program execution.
.TP
.BR 1 " (EXIT_FAILURE)"
The operation failed or the command syntax was not valid.
.TP
.BR 70 " (EX_SOFTWARE)"
libopts had an internal operational error.  Please report
it to autogen-users@lists.sourceforge.net.  Thank you.
.SH "SEE ALSO"
gnutls\-cli\-debug(1), gnutls\-cli(1)
.SH "AUTHORS"
Nikos Mavrogiannopoulos, Simon Josefsson and others; see /usr/share/doc/gnutls/AUTHORS for a complete list.
.SH "COPYRIGHT"
Copyright (C) 2000-2014 Free Software Foundation, and others all rights reserved.
This program is released under the terms of the GNU General Public License, version 3 or later.
.SH "BUGS"
Please send bug reports to: bugs@gnutls.org
.SH "NOTES"
This manual page was \fIAutoGen\fP-erated from the \fBgnutls-serv\fP
option definitions.
